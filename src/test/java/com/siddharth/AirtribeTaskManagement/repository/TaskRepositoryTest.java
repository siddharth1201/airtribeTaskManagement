package com.siddharth.AirtribeTaskManagement.repository;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;

import com.siddharth.AirtribeTaskManagement.entity.Task;
import com.siddharth.AirtribeTaskManagement.enums.Priority;
import com.siddharth.AirtribeTaskManagement.enums.TaskStatus;

/**
 * @DataJpaTest provides a focused test slice for the persistence layer.
 * It will disable full auto-configuration and apply only configuration relevant to JPA tests.
 * By default, it uses an embedded in-memory database (like H2).
 */
@DataJpaTest
public class TaskRepositoryTest {

    /**
     * @Autowired will inject the TaskRepository bean that Spring creates for this test context.
     */
    @Autowired
    private TaskRepository taskRepository;

    // Now, let's write the test methods in the following steps.

    @Test
    public void testSaveAndFindById() {
        // 1. Arrange: Create a new Task object.
        Task newTask = new Task("Test Title", "Test Description", TaskStatus.TODO, Priority.MEDIUM, null);

        // 2. Act: Save the task to the database using the repository.
        Task savedTask = taskRepository.save(newTask);

        // 3. Assert: Verify the task was saved correctly.
        assertNotNull(savedTask); // Check that the saved object is not null
        assertNotNull(savedTask.getId()); // Check that the ID was generated by the database

        // Now, try to find it by its ID
        Optional<Task> retrievedTaskOptional = taskRepository.findById(savedTask.getId());

        // Assert that the task was found and its properties are correct
        assertTrue(retrievedTaskOptional.isPresent()); // Check that an object was found
        Task retrievedTask = retrievedTaskOptional.get();
        assertEquals("Test Title", retrievedTask.getName());
        assertEquals(TaskStatus.TODO, retrievedTask.getStatus());
    }

    @Test
    public void testFindAll() {
        // 1. Arrange: Create and save a couple of tasks.
        Task task1 = new Task("Task 1", "Descccccccccccccccc 1", TaskStatus.TODO, Priority.HIGH, null);
        Task task2 = new Task("Task 2", "Descccccccccccccccc 2", TaskStatus.IN_PROGRESS, Priority.LOW, null);
        taskRepository.save(task1);
        taskRepository.save(task2);

        // 2. Act: Retrieve all tasks from the repository.
        List<Task> tasks = taskRepository.findAll();

        // 3. Assert: Verify the list is correct.
        assertNotNull(tasks);
        assertEquals(2, tasks.size()); // Check that the list contains two tasks
    }
}